from .private import pygame
from .event import ElementEvent
from abc import ABC, abstractmethod


class ElementInterface(ABC):

    """ ClassInterface - Element interface class. As a means of interface to the element class. """

    @abstractmethod
    def __init__(self) -> None: ...
    @abstractmethod
    def __copy__(self): ...
    ...
    @abstractmethod
    def copy(self, **kwargs): ...
    @abstractmethod
    def edit_param(self, **kwargs) -> None: ...
    @abstractmethod
    def get_param(self) -> dict[str, object]: ...
    def handle_event(self, event: pygame.event.Event) -> None: ...
    def draw_and_update(self) -> ElementEvent: ...
    def update(self) -> ElementEvent: ...


class ButtonInterface(ABC):

    """ ButtonInterface - Button interface class. As a means of interface to the button class. """

    @abstractmethod
    def __init__(self) -> None: ...
    @abstractmethod
    def __copy__(self): ...
    ...
    @abstractmethod
    def copy(self, **kwargs): ...
    @abstractmethod
    def edit_param(self, **kwargs) -> None: ...
    @abstractmethod
    def get_param(self) -> dict[str, object]: ...
    @abstractmethod
    def handle_event(self, event: pygame.event.Event) -> None: ...
    @abstractmethod
    def draw_and_update(self) -> ElementEvent: ...
    @abstractmethod
    def draw_inactive(self) -> None: ...
    @abstractmethod
    def draw_hover(self) -> None: ...
    @abstractmethod
    def draw_active(self) -> None: ...